;
; Values for starting the program
;
define x 	   $03
define y	   $05

;
; Addresses
;
define ans_addr	   $00
define temp_addr   $02
define temp_addr_2   $04

main:
	LDA #x
	PHA 
	LDA #y
	PHA 
	JSR c
	PLA ; get result
	STA ans_addr
	PLA ; throw away x
	BRK

;
; c(x,y) = b(x+4,x) + y
;
c:
	TSX
	TXA
	CLC
	ADC #$03 ; moves to first parameter (x)
	TAY
	LDA $0100, Y	; x in accumulator

	STA temp_addr_2

	ADC #$03
	PHA	; x + 4 on stack

	LDA temp_addr_2
	PHA	; x on stack

	JSR b
	
	PLA ; pulls result from stack
	STA temp_addr_2	; saves b(x+4, x)

;
;  
;





;
; a(x) = 2x + 3
;
a:
	TSX
	TXA
	CLC
	ADC #$03		; moves to the first parameter (x)
	TAY
	LDA $0100, Y	; loads x into accumulator
	
	STA temp_addr
	ADC temp_addr	; 2x now in accumulator

	ADC #$03
	STA $0100, Y	; replace the parameter with the return value
	RTS

;
; b(x,y) = a(x+2) + a(3y)
;
b:
	TSX			
	TXA
	CLC
	ADC #$03		; move to the 2nd parameter (y)
	TAY
	LDA $0100, Y	; loads y into accumulator
	
	STA temp_addr
	ADC temp_addr	; doubles y
	ADC temp_addr	; triples y
	PHA 			; Push 3y to the stack as an argument for a.
	JSR a			; Leave the result on the stack for now

	TSX
	TXA
	CLC
	ADC #$05		; moves to the first parameter (x)
	TAY
	LDA $0100, Y	; loads x into accumulator

	ADC #$02	
	PHA 			; Push x+2 to the stack as an argument for a.
	JSR a  			; Result from this call will be left on stack
	
	PLA				; a(x+2)
	STA temp_addr   
	PLA				; a(3y)
	ADC temp_addr
	STA temp_addr	; return value is in the temp_addr

	TSX
	TXA
	CLC
	ADC #$03		; overrite first parameter with the return val
	TAY

	LDA temp_addr
	STA $0100, Y

	RTS
